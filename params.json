{"name":"IreCore","tagline":"A High Performance Simulator for Fury Warriors.","body":"### Why IreCore?\r\nIreCore is a high performance, event-oriented, heterogeneous simulator written in OpenCL C, models a warrior character with fury spec dealing damage to a single raid boss.\r\n\r\nCurrently the state-of-the-art simulator [SimulationCraft](https://github.com/simulationcraft/simc) is far more functional than IreCore. But while large-scale theorycrafting (e.g. [APLGA](https://github.com/AeanSR/aplga) & [Maxima Climb](https://github.com/AeanSR/climb)), the effeciency of SimC cannot meet our needs. For example, APLGA runs **billions** of sim iterations to generate APL from scratch, for SimC that means approximately 1000 hours CPU time, 41 days without a break. That seems unacceptable.\r\n\r\n![SpeedUp SimC versus IreCore](http://sim.aean.net/speedup_comp.png)\r\n\r\nWith IreCore, the simulation speedup for common configurations skyrocketed 20x relatively, and even faster for simplified configurations. What's more, IreCore is able to run on CPU, or GPU, or whatever compute devices support OpenCL, such as Intel Xeon Phi coprocessors. If you run two IreCore process simutaneously on both CPU and GPU, you would get even 2x more faster.\r\n\r\nAPLGA needs approximately 50 hours CPU time with IreCore as its evaluation function. If we run on both CPU and GPU, it needs just 1 day to get result. Sounds pretty good.\r\n\r\n### IreCore Philosophy\r\nDamage dealing process in World of Warcraft is a _Fully Observable Markov Process_. That means an APL without internal states (Hereinafter referred to as _sAPL_) can be one of the optimal policy.\r\n\r\nsAPL is a mapping from the state set _**S**_ to the action set _**A**_. So if we are at the same state _s_ at different time _t1_ and _t2_, we will get exactly the same action _a_ from a sAPL.\r\n\r\nSo, if we scanned APL at moment _t1_, and executed nothing, and nothing happened to change system state, at the next moment _t2_ we will execute nothing, same for the next moment _t3_, and same for the next moment _t4_... Until something happened and the system state changed, we may get a different action from APL.\r\n\r\nLet's see some example. Here stands a warrior \"Kylaciela\" and she uses a spell called \"bump\". \"bump\" has no cooldown, no cost, and have a 1.5 seconds GCD. We designed a cool policy for Kyla, described as sAPL:\r\n```\r\nbump, if bump is ready.\r\notherwise, wait.\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}